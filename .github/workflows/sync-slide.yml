name: Sync and Deploy Slide

on:
  repository_dispatch:
    types: [sync-slides]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  TEMP_IMAGES: temp-images
  TEMP_IMAGES_CRUNCHED: temp-images-crunched

concurrency:
  group: "sync"
  cancel-in-progress: false

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Create service account JSON file
        run: |
          echo '${{ secrets.SERVICE_ACCOUNT_JSON }}' > service-account.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install packages
        run: |
          npm install
        shell: bash

      - name: Notify download start
        uses: ./.github/actions/notify-step
        with:
          app-url: ${{ secrets.APP_URL }}
          sync-id: ${{ github.event.client_payload.syncId }}
          step: download

      - name: Download slides as images
        env:
          SERVICE_ACCOUNT_JSON_PATH: "./service-account.json"
          SLIDES_CONFIG: ${{ toJSON(github.event.client_payload.slides) }}
          TEMP_DIR: ${{ env.TEMP_IMAGES }}
        run: |
          mkdir -p $TEMP_DIR
          node ./scripts/download-slides.js

      - name: Notify compress start
        uses: ./.github/actions/notify-step
        with:
          app-url: ${{ secrets.APP_URL }}
          sync-id: ${{ github.event.client_payload.syncId }}
          step: compress

      - name: Crunch images
        uses: tp-jp/unity-export-crunched-action@v1
        with:
          input-path: ${{ env.TEMP_IMAGES }}
          output-path: ${{ env.TEMP_IMAGES_CRUNCHED }}
          unity-email: ${{ secrets.UNITY_EMAIL }}
          unity-password: ${{ secrets.UNITY_PASSWORD }}
          unity-license: ${{ secrets.UNITY_LICENSE }}
          unity-version: "2022.3.22f1"
          max-size: "2048"
          compression-quality: "50"

      - name: Notify combine start
        uses: ./.github/actions/notify-step
        with:
          app-url: ${{ secrets.APP_URL }}
          sync-id: ${{ github.event.client_payload.syncId }}
          step: combine

      - name: Combine images
        env:
          INPUT_DIR: ${{ env.TEMP_IMAGES_CRUNCHED }}
          OUTPUT_DIR: "./public/slides"
        run: |
          mkdir -p $OUTPUT_DIR
          rm -rf $OUTPUT_DIR/*
          node ./scripts/combine-images.js

      - name: Notify commit start
        uses: ./.github/actions/notify-step
        with:
          app-url: ${{ secrets.APP_URL }}
          sync-id: ${{ github.event.client_payload.syncId }}
          step: commit

      - name: Check for changes
        id: check-changes
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          git add --all

          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update slides"
            git push
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify deploy start
        uses: ./.github/actions/notify-step
        with:
          app-url: ${{ secrets.APP_URL }}
          sync-id: ${{ github.event.client_payload.syncId }}
          step: deploy

  deploy:
    needs: sync-and-build
    if: needs.sync-and-build.outputs.has-changes == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./public"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    needs: [sync-and-build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify completion
        run: |
          if [[ "${{ needs.sync-and-build.result }}" != "success" ]]; then
            status="failed"
            error="Build failed: ${{ needs.sync-and-build.result }}"
          elif [[ "${{ needs.deploy.result }}" != "success" && "${{ needs.deploy.result }}" != "skipped" ]]; then
            status="failed"
            error="Deploy failed: ${{ needs.deploy.result }}"
          else
            status="completed"
            error=""
          fi

          curl -X POST ${{ secrets.APP_URL }}/api/sync/${{ github.event.client_payload.syncId }}/status \
            -H "Content-Type: application/json" \
            -d "{\"status\": \"$status\", \"errorMessage\": \"$error\"}"
